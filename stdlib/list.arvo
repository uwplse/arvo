import nat. @ implies bool, equality, and prelude @

data list (A : Type) := nil : list A | cons : A -> list A -> list A.

def fold_right : (A B : Type) -> B -> (A -> B -> B) -> list A -> B :=
  \A. \B. \z. \f.
    list_elim A (\_. B) z (\h. \_. \rec. f h rec).

def fold_left : (A B : Type) -> B -> (B -> A -> B) -> list A -> B :=
  \A. \B. \z. \f. \l.
    list_elim A (\_. B -> B) (\acc. acc) (\h. \t. \rec. \acc. rec (f acc h)) l z.

def map : (A B : Type) -> (A -> B) -> list A -> list B :=
  \A. \B. \f. \l.
    fold_right A (list B) (nil B) (\h. \rec. cons B (f h) rec) l.

def filter : (A : Type) -> (A -> bool) -> list A -> list A :=
  \A. \f. \l.
    fold_right A (list A) (nil A) (\h. \t. if (list A) (f h) (cons A h t) t) l.

def app : (A : Type) -> (xs ys : list A) -> list A :=
  \A. \xs. \ys.
    fold_right A (list A) ys (cons A) xs.

def snoc : (A : Type) -> list A -> A -> list A :=
  \A. \l. \x. app A l (cons A x (nil A)).

def rev : (A : Type) -> list A -> list A :=
  \A. \l.
    fold_right A (list A) (nil A) (\h. \t. snoc A t h) l.

def length : (A : Type) -> list A -> nat :=
  \A. fold_right A nat O (\_. S).


def list_case : (A : Type) -> (B : list A -> Type) -> B (nil A) -> ((h : A) -> (t : list A) -> B (cons A h t)) -> (l : list A) -> B l :=
  \A. \B. \n. \c.
    list_elim A (\z. B z)
              n
              (\h. \t. \_. c h t)
  .

def is_cons : (A : Type) -> (l : list A) -> bool :=
  \A. list_case A (\_. bool) false (\_. \_. true).

def all : (A : Type) -> (A -> Type) -> list A -> Type :=
  \A . \P.
    list_elim A (\_. Type)
      True
      (\h. \_. \rec. prod (P h) rec)
  .

def implies_all : (A : Type) -> (P Q : A -> Type) ->
                  ((x : A) -> P x -> Q x) ->
                  (l : list A) ->
                  all A P l ->
                  all A Q l :=
  \A. \P. \Q. \HPQ.
    list_elim A (\z. all A P z -> all A Q z)
      (\HP. I)
      (\h. \t. \IHt. \HP.
        prod_intro (Q h) (all A Q t)
          (HPQ h (fst (P h) (all A P t) HP))
          (IHt (snd (P h) (all A P t) HP)))
  .

def nth_default : (A : Type) -> nat -> A -> list A -> A :=
  \A. \n. \x. \l.
    list_elim A (\_. nat -> A)
      (\_. x)
      (\h. \t. \rec : nat -> A.
        nat_elim (\_. A)
          h
          (\n. \_. rec n))
      l
      n
  .

import option.

def nth_error : (A : Type) -> nat -> list A -> option A :=
  \A. \n. \l.
    nth_default (option A) n (none A) (map A (option A) (some A) l)
  .

def alist : Type -> Type -> Type := \k. \v. list (prod k v).

def alist_lookup : (K V : Type) -> (K -> K -> bool) -> K -> alist K V -> option V :=
  \K. \V. \k_eq. \k.
    fold_right (prod K V) (option V) (none V)
      (\item. \rec. if (option V) (k_eq k (fst K V item)) (some V (snd K V item)) rec)
  .
