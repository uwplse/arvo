import prelude.
import nat.
import sig.

def rel : Type -> Type := \A. A -> A -> Type.

record ordering := {
    carrier : Type ;
    lt : rel carrier ;
    transitive : (x y z : carrier) -> lt x y -> lt y z -> lt x z ;
    noChains : (f : nat -> carrier) -> ((n : nat) -> lt (f (S n)) (f n)) -> False
  }.

def irreflexive :
    (o : ordering) ->
    (a : carrier o) ->
    lt o a a ->
    False :=
  \o. \a. \H.
   noChains o (\_. a) (\_. H).

record orderingLe (o1 : ordering) (o2 : ordering) := {
    map : carrier o1 -> carrier o2 ;
    max : carrier o2 ;
    mapOk : (x y : carrier o1) -> lt o1 x y -> lt o2 (map x) (map y) ;
    maxOk : (x : carrier o1) -> lt o2 (map x) max
  }.

def the_map : (f : nat -> ordering) -> ((n : nat) -> orderingLe (f (S n)) (f n)) -> (n : nat) -> carrier (f n) -> carrier (f O) :=
  \f. \Hf.
    nat_elim (\z. carrier (f z) -> carrier (f O))
      (\x. x)
      (\n. \rec : carrier (f n) -> carrier (f O). \x : carrier (f (S n)).
        rec (map (f (S n)) (f n) (Hf n) x))
  .

def the_map_monotonic : (f : nat -> ordering) -> (Hf : (n : nat) -> orderingLe (f (S n)) (f n)) ->
                        (n : nat) ->
                        (x y : carrier (f n)) ->
                        lt (f n) x y ->
                        lt (f O) (the_map f Hf n x) (the_map f Hf n y) :=
  \f. \Hf.
    nat_elim (\z. (x y : carrier (f z)) -> lt (f z) x y -> lt (f O) (the_map f Hf z x) (the_map f Hf z y))
      (\x. \y. \Hxy. Hxy)
      (\n. \IHn. \x. \y. \Hxy.
        IHn (map (f (S n)) (f n) (Hf n) x)
            (map (f (S n)) (f n) (Hf n) y)
            (mapOk (f (S n)) (f n) (Hf n) x y Hxy))
  .

def orderingLe_noChains :
    (f : nat -> ordering) ->
    ((n : nat) -> orderingLe (f (S n)) (f n)) ->
    False :=
  \f. \Hf.
    noChains (f O) (\n. the_map f Hf n (max (f (S n)) (f n) (Hf n)))
      (\n. the_map_monotonic f Hf n
             (map (f (S n)) (f n) (Hf n) (max (f (S (S n))) (f (S n)) (Hf (S n))))
             (max (f (S n)) (f n) (Hf n))
             (maxOk (f (S n)) (f n) (Hf n) (max (f (S (S n))) (f (S n)) (Hf (S n)))))
  .

def orderingLe_trans : (o1 o2 o3 : ordering) ->
                       orderingLe o1 o2 ->
                       orderingLe o2 o3 ->
                       orderingLe o1 o3 :=
  \o1. \o2. \o3.
  \ole12. \ole23.
    orderingLe_intro o1 o3
      (\x. map o2 o3 ole23 (map o1 o2 ole12 x))
      (max o2 o3 ole23)
      (\x. \y. \Hxy.
        mapOk o2 o3 ole23 (map o1 o2 ole12 x) (map o1 o2 ole12 y) (mapOk o1 o2 ole12 x y Hxy))
      (\x. maxOk o2 o3 ole23 (map o1 o2 ole12 x))
  .

def orderingOfOrderings : ordering :=
  ordering_intro ordering orderingLe orderingLe_trans orderingLe_noChains.

def subOrdering_carrier : (o : ordering) -> carrier o -> Type :=
  \o. \a. (sigT (carrier o) (\x. lt o x a)).

def subOrdering_proj : (o : ordering) -> (a : carrier o) -> subOrdering_carrier o a -> carrier o :=
  \o. \a. \s. projT1 (carrier o) (\x. lt o x a) s.

def subOrdering_proof : (o : ordering) -> (a : carrier o) -> (x : subOrdering_carrier o a) -> lt o (subOrdering_proj o a x) a :=
  \o. \a. projT2 (carrier o) (\x. lt o x a).

def subOrdering : (o : ordering) -> carrier o -> ordering :=
  \o. \a.
    ordering_intro
      (subOrdering_carrier o a)
      (\x. \y. lt o (subOrdering_proj o a x) (subOrdering_proj o a y))
      (\x. \y. \z. \Hxy. \Hyz. transitive o (subOrdering_proj o a x) (subOrdering_proj o a y) (subOrdering_proj o a z) Hxy Hyz)
      (\f. \Hf. noChains o (\n. subOrdering_proj o a (f n)) (\n. Hf n))
  .

def subOrdering_monotonic : (o : ordering) -> (a b : carrier o) ->
                            lt o a b ->
                            orderingLe (subOrdering o a) (subOrdering o b) :=
  \o. \a. \b. \Hab.
    orderingLe_intro (subOrdering o a) (subOrdering o b)
      (\x. existT (carrier o) (\x. lt o x b) (subOrdering_proj o a x) (transitive o (subOrdering_proj o a x) a b (subOrdering_proof o a x) Hab))
      (existT (carrier o) (\x. lt o x b) a Hab)
      (\x. \y. \Hxy. Hxy)
      (\x. subOrdering_proof o a x)
  .

def subOrdering_less_than_original :
    (o : ordering) -> (a : carrier o) ->
    orderingLe (subOrdering o a) o :=
  \o. \a.
    orderingLe_intro (subOrdering o a) o
      (subOrdering_proj o a)
      a
      (\x. \y. \Hxy. Hxy)
      (\x. subOrdering_proof o a x)
  .

def orderingOfOrderings_is_max :
    (o : ordering) ->
    orderingLe o orderingOfOrderings :=
  \o.
    orderingLe_intro
      o orderingOfOrderings
      (subOrdering o)
      o
      (\x. \y. \Hxy. subOrdering_monotonic o x y Hxy)
      (\x. subOrdering_less_than_original o x).


def orderingOfOrderings_reflexive :
    orderingLe orderingOfOrderings orderingOfOrderings :=
  orderingOfOrderings_is_max orderingOfOrderings.

def girards_paradox : False :=
  irreflexive orderingOfOrderings orderingOfOrderings orderingOfOrderings_reflexive.
