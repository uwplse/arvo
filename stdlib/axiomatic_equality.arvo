axiom eq : (A : Type) -> A -> A -> Type.
check eq.

axiom refl : (A : Type) -> (a : A) -> eq _ a a.
check refl.

axiom subst : (A : Type) -> (P : A -> Type) -> (a : A) -> P a -> (b : A) -> eq _ a b -> P b.
check subst.

axiom subst_compute : (A : Type) -> (P : A -> Type) -> (a : A) -> (pf : P a) ->
      eq _ (subst _ _ a pf a (refl _ a)) pf.
check subst_compute.

axiom J : (A : Type) -> (P : (a : A) -> (b : A) -> eq _ a b -> Type) ->
          (a : A) -> P _ _ (refl _ a) -> (b : A) -> (pf : eq _ a b) -> P a b pf.
check J.


def eq_sym : (A : Type) -> (a b : A) -> eq _ a b -> eq _ b a :=
    \A : Type. \a : A. \b : A. \pf : eq A a b.
     subst A (\x : A. eq A x a) a (refl A a) b pf.
check eq_sym.
print eq_sym.

def eq_trans : (A : Type) -> (a b c : A) ->
               eq _ a b -> eq _ b c -> eq _ a c :=
    \A. \a. \b. \c.
      \ab.
        subst _ (\x. eq A x c -> eq _ a c) _ (\y. y) b ab.
check eq_trans.
print eq_trans.

def f_equal : (A B : Type) -> (f : A -> B) -> (x y : A) ->
              eq A x y -> eq B (f x) (f y) :=
  \A. \B. \f. \x. \y. \H.
    subst A (\z. eq B (f x) (f z)) x (refl B (f x)) y H.
check f_equal.
print f_equal.

def rewrite : (A : Type) -> (P : A -> Type) -> (a : A) -> P a -> (b : A) ->
              eq _ b a -> P b :=
  \A. \P. \a. \pa. \b. \Heq.
    subst A P a pa b (eq_sym _ _ _ Heq).

def f_equal2 : (A B C : Type) ->
               (f : A -> B -> C) ->
               (a1 a2 : A) -> eq _ a1 a2 ->
               (b1 b2 : B) -> eq _ b1 b2 ->
               eq _ (f a1 b1) (f a2 b2) :=
  \A. \B. \C.
  \f.
  \a1. \a2. \pfa.
  \b1. \b2. \pfb.
    rewrite A
            (\z. eq C (f z b1) (f a2 b2))
            a2
            (f_equal B C (f a2) b1 b2 pfb)
            a1
            pfa.
