import bool. @implies equality@

data nat := O | S : nat -> nat.

def plus : nat -> nat -> nat :=
    \n. \m.
      nat_elim (\x. nat) m (\x. \y. S y) n.

def mult : nat -> nat -> nat :=
  \n. \m.
     nat_elim (\_.nat) O (\_. \y. plus m y) n.

def nat_case : (P : nat -> Type) -> P O -> ((n : nat) -> P (S n)) -> (n : nat) -> P n :=
  \P. \o. \s : (n : nat) -> P (S n). \n.
    nat_elim P
             o
             (\x. \_. s x)
             n.

def nat_case_simple : (A : Type) -> A -> ((n : nat) -> A) -> (n : nat) -> A :=
  \A. nat_case (\_. A).

def nat_rec : (A : Type) -> A -> (A -> A) -> (n : nat) -> A :=
  \A. \o. \s.
    nat_elim (\_. A)
             o
             (\_. s).


def eqb_nat : nat -> nat -> bool :=
  \n.
    nat_elim (\_. nat -> bool)
             (\m. nat_case_simple bool true (\_. false) m)
             (\x. \rec. \m. nat_case_simple bool false rec m)
             n.

def pred : nat -> nat :=
  nat_elim (\_. nat)
    O
    (\n. \_. n)
  .

def leb : nat -> nat -> bool :=
  nat_elim (\_. nat -> bool)
    (\_. true)
    (\n. \rec.
      nat_elim (\_. bool)
        false
        (\m. \_. rec m))
  .

def ltb : nat -> nat -> bool :=
  \n. \m. 
    nat_elim (\_. nat -> bool)
      (\_. false)
      (\m. \rec. 
        nat_elim (\_. bool)
          true
          (\n. \_. rec n))
      m
      n
  .

def le : nat -> nat -> Type :=
  nat_rec (nat -> Type)
          (\_. True)
          (\rec. \m.
            nat_case_simple Type
              False
              (\mp. rec mp)
              m)
  .
