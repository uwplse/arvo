import prelude.
import axiomatic_equality.

data bool := true | false.

def if : (A : Type) -> bool -> A -> A -> A :=
  \A. \b. \t. \f.
    bool_elim (\_. A)
              t
              f
              b.

def notb : bool -> bool :=
  \x. if _ x false true.

def true_false_inv : eq _ true false -> False :=
  \H. subst _
            (\z. if _ z True False)
            _
            I
            _
            H.

def false_true_inv : eq _ false true -> False :=
  \H. true_false_inv (eq_sym _ _ _ H).

def notb_true : (x : bool) -> eq _ (notb x) true -> eq _ x false :=
  \x.
    bool_elim (\z. eq _ (notb z) true -> eq _ z false)
              (\H. exfalso (false_true_inv H) _)
              (\_. refl _ _)
              x.

def andb : bool -> bool -> bool :=
  \x. \y.
    if _ x y false.

def orb : bool -> bool -> bool :=
  \x. \y.
    if _ x true y.


def eqb_bool : bool -> bool -> bool :=
  \x. \y.
    if _ x y (notb y).


def eqb_bool_sound : (x y : bool) -> eq _ (eqb_bool x y) true -> eq _ x y :=
  \x. \y.
    bool_elim (\z. eq _ (eqb_bool z y) true -> eq _ z y)
              (\H. eq_sym _ _ _ H)
              (\H. eq_sym _ _ _ (notb_true _ H))
              x.

def eqb_bool_refl : (x : bool) -> eq _ (eqb_bool x x) true :=
  \x.
    bool_elim (\z. eq _ (eqb_bool z z) true)
              (refl _ _)
              (refl _ _)
              x.
